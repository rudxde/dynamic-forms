!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/material"),require("@angular/forms"),require("@angular/core"),require("@angular/common")):"function"==typeof define&&define.amd?define("dynamic-forms",["exports","@angular/material","@angular/forms","@angular/core","@angular/common"],t):t(e["dynamic-forms"]={},e.ng.material,e.ng.forms,e.ng.core,e.ng.common)}(this,function(e,t,s,o,r){"use strict";var n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])})(e,t)};function i(e,t){function o(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}var a=function(){return(a=Object.assign||function(e){for(var t,o=1,r=arguments.length;o<r;o++)for(var n in t=arguments[o])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)};var m=(l.propDecorators={XFormField:[{type:o.Input}],XFormGroup:[{type:o.Input}]},l);function l(){}var u,c=(i(d,u=m),d.prototype.ngOnInit=function(){},d.decorators=[{type:o.Component,args:[{selector:"dynamic-forms-checkbox-element",template:'<div class="input" [formGroup]="XFormGroup">\n  <mat-checkbox\n    [formControlName]="XFormField.id"\n    [indeterminate]="XFormField.indeterminate"\n    [labelPosition]="XFormField.align">\n    {{XFormField.text}}\n  </mat-checkbox>\n</div>\n',styles:[""]}]}],d.ctorParameters=function(){return[]},d);function d(){return u.call(this)||this}var p=(f.prototype.ngOnInit=function(){this.indexedFormDefinition=this.setFormFieldIds(this.form);var e=this.createReactiveFormsObject(this.indexedFormDefinition);this.myForm=this.fb.group(e)},f.prototype.setFormFieldIds=function(e){for(var t=[],o=0;o<e.length;o++)t.push(a({},e[o],{id:e[o].id||o}));return t},f.prototype.createReactiveFormsObject=function(e){function t(e){var t=e["default"]===undefined?"":e["default"],o=[];e.validators&&e.validators.forEach(function(e){switch(e.type){case"email":o.push(s.Validators.email);break;case"match":o.push(s.Validators.pattern(new RegExp(e.immediate)));break;case"max":o.push(s.Validators.max(e.immediate));break;case"min":o.push(s.Validators.min(e.immediate));break;case"maxLength":o.push(s.Validators.maxLength(e.immediate));break;case"minLength":o.push(s.Validators.minLength(e.immediate));break;case"required":o.push(s.Validators.required);break;case"requiredTrue":o.push(s.Validators.requiredTrue)}}),n[e.id]=[t,o]}var o,r,n={};try{for(var i=function m(e){var t="function"==typeof Symbol&&e[Symbol.iterator],o=0;return t?t.call(e):{next:function(){return e&&o>=e.length&&(e=void 0),{value:e&&e[o++],done:!e}}}}(e),a=i.next();!a.done;a=i.next())t(a.value)}catch(l){o={error:l}}finally{try{a&&!a.done&&(r=i["return"])&&r.call(i)}finally{if(o)throw o.error}}return n},f.prototype.submitClick=function(){this.result$.next(this.myForm.value)},f.prototype.abortClick=function(){this.result$.error("abort")},f.decorators=[{type:o.Component,args:[{selector:"dynamic-forms-form",template:'<form [formGroup]="myForm">\n  <div *ngFor="let x of indexedFormDefinition" class="form-element">\n    <dynamic-forms-input-element *ngIf="x.type === \'input\'" [XFormGroup]="myForm" [XFormField]="x"></dynamic-forms-input-element>\n    <dynamic-forms-checkbox-element *ngIf="x.type === \'check\'" [XFormGroup]="myForm" [XFormField]="x"></dynamic-forms-checkbox-element>\n    <dynamic-forms-radiogroup-element *ngIf="x.type === \'radio\'" [XFormGroup]="myForm" [XFormField]="x">\n    </dynamic-forms-radiogroup-element>\n    <dynamic-forms-slide-element *ngIf="x.type === \'slide\'" [XFormGroup]="myForm" [XFormField]="x"></dynamic-forms-slide-element>\n    <dynamic-forms-slider-element *ngIf="x.type === \'slider\'" [XFormGroup]="myForm" [XFormField]="x"></dynamic-forms-slider-element>\n    <dynamic-forms-select-element *ngIf="x.type === \'select\'" [XFormGroup]="myForm" [XFormField]="x"></dynamic-forms-select-element>\n  </div>\n  <button mat-raised-button color="secondary" *ngIf="abortButton" (click)="abortClick()">\n    {{abortButtonText}}\n  </button>\n  <button mat-raised-button color="primary" [disabled]="myForm.invalid" (click)="submitClick()">\n    {{submitButtonText}}\n  </button>\n</form>\n',styles:[".form-element{margin-bottom:10px}"]}]}],f.ctorParameters=function(){return[{type:s.FormBuilder}]},f.propDecorators={form:[{type:o.Input}],submitButtonText:[{type:o.Input}],abortButton:[{type:o.Input}],abortButtonText:[{type:o.Input}],result$:[{type:o.Input}]},f);function f(e){this.fb=e}var y,F=(i(h,y=m),h.prototype.ngOnInit=function(){},h.decorators=[{type:o.Component,args:[{selector:"dynamic-forms-input-element",template:'<div class="input" [formGroup]="XFormGroup">\n  <mat-form-field>\n    <input matInput [placeholder]="XFormField.placeholder" [formControlName]="XFormField.id">\n  </mat-form-field>\n</div>\n',styles:[""]}]}],h.ctorParameters=function(){return[]},h);function h(){return y.call(this)||this}var g,b=(i(v,g=m),v.prototype.ngOnInit=function(){this.XFormField.otherOption&&console.warn("otherOption on radiogroup currently not supported!")},v.decorators=[{type:o.Component,args:[{selector:"dynamic-forms-radiogroup-element",template:'<div class="input" [formGroup]="XFormGroup">\n  <mat-radio-group [formControlName]="XFormField.id">\n    <mat-radio-button class="radio-button" *ngFor="let x of XFormField.options" [value]="x"\n      [labelPosition]="XFormField.align">\n      {{x}}\n    </mat-radio-button>\n  </mat-radio-group>\n</div>\n',styles:[".radio-button{display:block}"]}]}],v.ctorParameters=function(){return[]},v);function v(){return g.call(this)||this}var x,X=(i(I,x=m),I.prototype.ngOnInit=function(){},I.decorators=[{type:o.Component,args:[{selector:"dynamic-forms-select-element",template:'<div class="input" [formGroup]="XFormGroup">\n  <mat-form-field>\n    <mat-label>{{XFormField.title}}</mat-label>\n    <select matNativeControl [formControlName]="XFormField.id">\n      <option *ngFor="let option of XFormField.options" [value]="option">{{option}}</option>\n    </select>\n    \x3c!-- <mat-error *ngIf="field.controls.value.hasError(\'required\')">\n          This field is required\n        </mat-error>\n        <mat-hint>You can pick up your favorite car here</mat-hint> --\x3e\n  </mat-form-field>\n</div>\n',styles:[""]}]}],I.ctorParameters=function(){return[]},I);function I(){return x.call(this)||this}var k,C=(i(G,k=m),G.prototype.ngOnInit=function(){},G.decorators=[{type:o.Component,args:[{selector:"dynamic-forms-slide-element",template:'<div class="input" [formGroup]="XFormGroup">\n    <mat-slide-toggle [color]="XFormField.color" [formControlName]="XFormField.id">{{XFormField.text}}</mat-slide-toggle>\n  </div>\n',styles:[""]}]}],G.ctorParameters=function(){return[]},G);function G(){return k.call(this)||this}var M,O=(i(P,M=m),P.prototype.ngOnInit=function(){},P.decorators=[{type:o.Component,args:[{selector:"dynamic-forms-slider-element",template:'<div class="input" [formGroup]="XFormGroup">\n    <mat-slider\n      [min]="XFormField.min"\n      [max]="XFormField.max"\n      [step]="XFormField.step"\n      [formControlName]="XFormField.id">\n    </mat-slider>\n</div>\n',styles:[""]}]}],P.ctorParameters=function(){return[]},P);function P(){return M.call(this)||this}var q=(_.decorators=[{type:o.NgModule,args:[{declarations:[c,p,F,b,X,C,O],imports:[r.CommonModule,s.FormsModule,s.ReactiveFormsModule,t.MatInputModule,t.MatButtonModule,t.MatSliderModule,t.MatSelectModule,t.MatCheckboxModule,t.MatRadioModule,t.MatSlideToggleModule],exports:[p]}]}],_);function _(){}e.DynamicFormsModule=q,e.ɵb=m,e.ɵa=c,e.ɵc=p,e.ɵd=F,e.ɵe=b,e.ɵf=X,e.ɵg=C,e.ɵh=O,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=dynamic-forms.umd.min.js.map