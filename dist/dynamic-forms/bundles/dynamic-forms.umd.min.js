!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/material"),require("@angular/forms"),require("@angular/core"),require("@angular/common"),require("@angular/platform-browser")):"function"==typeof define&&define.amd?define("dynamic-forms",["exports","@angular/material","@angular/forms","@angular/core","@angular/common","@angular/platform-browser"],t):t(e["dynamic-forms"]={},e.ng.material,e.ng.forms,e.ng.core,e.ng.common,e.ng.platformBrowser)}(this,function(e,t,s,o,r,n){"use strict";var i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])})(e,t)};function a(e,t){function o(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}var m=function(){return(m=Object.assign||function(e){for(var t,o=1,r=arguments.length;o<r;o++)for(var n in t=arguments[o])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)};var l=(u.propDecorators={XFormField:[{type:o.Input}],XFormGroup:[{type:o.Input}]},u);function u(){}var c,d=(a(p,c=l),p.prototype.ngOnInit=function(){},p.decorators=[{type:o.Component,args:[{selector:"dynamic-forms-checkbox-element",template:'<div class="input" [formGroup]="XFormGroup">\n  <mat-checkbox\n    [formControlName]="XFormField.id"\n    [indeterminate]="XFormField.indeterminate"\n    [labelPosition]="XFormField.align">\n    {{XFormField.text}}\n  </mat-checkbox>\n</div>\n',styles:[""]}]}],p.ctorParameters=function(){return[]},p);function p(){return c.call(this)||this}var f=(y.prototype.ngOnInit=function(){this.indexedFormDefinition=this.setFormFieldIds(this.form);var e=this.createReactiveFormsObject(this.indexedFormDefinition);this.myForm=this.fb.group(e)},y.prototype.setFormFieldIds=function(e){for(var t=[],o=0;o<e.length;o++)t.push(m({},e[o],{id:o}));return t},y.prototype.createReactiveFormsObject=function(e){function t(e){var t=e["default"]===undefined?"":e["default"],o=[];e.validators&&e.validators.forEach(function(e){switch(e.type){case"email":o.push(s.Validators.email);break;case"match":o.push(s.Validators.pattern(new RegExp(e.immediate)));break;case"max":o.push(s.Validators.max(e.immediate));break;case"min":o.push(s.Validators.min(e.immediate));break;case"maxLength":o.push(s.Validators.maxLength(e.immediate));break;case"minLength":o.push(s.Validators.minLength(e.immediate));break;case"required":o.push(s.Validators.required);break;case"requiredTrue":o.push(s.Validators.requiredTrue)}}),n[e.id]=[t,o]}var o,r,n={};try{for(var i=function m(e){var t="function"==typeof Symbol&&e[Symbol.iterator],o=0;return t?t.call(e):{next:function(){return e&&o>=e.length&&(e=void 0),{value:e&&e[o++],done:!e}}}}(e),a=i.next();!a.done;a=i.next())t(a.value)}catch(l){o={error:l}}finally{try{a&&!a.done&&(r=i["return"])&&r.call(i)}finally{if(o)throw o.error}}return n},y.prototype.submitClick=function(){this.result$.next(this.myForm.value)},y.prototype.abortClick=function(){this.result$.error("abort")},y.decorators=[{type:o.Component,args:[{selector:"dynamic-forms-form",template:'<form [formGroup]="myForm">\n  <div *ngFor="let x of indexedFormDefinition" class="form-element">\n    <dynamic-forms-input-element *ngIf="x.type === \'input\'" [XFormGroup]="myForm" [XFormField]="x"></dynamic-forms-input-element>\n    <dynamic-forms-checkbox-element *ngIf="x.type === \'check\'" [XFormGroup]="myForm" [XFormField]="x"></dynamic-forms-checkbox-element>\n    <dynamic-forms-radiogroup-element *ngIf="x.type === \'radio\'" [XFormGroup]="myForm" [XFormField]="x">\n    </dynamic-forms-radiogroup-element>\n    <dynamic-forms-slide-element *ngIf="x.type === \'slide\'" [XFormGroup]="myForm" [XFormField]="x"></dynamic-forms-slide-element>\n    <dynamic-forms-slider-element *ngIf="x.type === \'slider\'" [XFormGroup]="myForm" [XFormField]="x"></dynamic-forms-slider-element>\n    <dynamic-forms-select-element *ngIf="x.type === \'select\'" [XFormGroup]="myForm" [XFormField]="x"></dynamic-forms-select-element>\n  </div>\n  <button mat-raised-button color="secondary" *ngIf="abortButton" (click)="abortClick()">\n    {{abortButtonText}}\n  </button>\n  <button mat-raised-button color="primary" [disabled]="myForm.invalid" (click)="submitClick()">\n    {{submitButtonText}}\n  </button>\n</form>\n',styles:[".form-element{margin-bottom:10px}"]}]}],y.ctorParameters=function(){return[{type:s.FormBuilder}]},y.propDecorators={form:[{type:o.Input}],submitButtonText:[{type:o.Input}],abortButton:[{type:o.Input}],abortButtonText:[{type:o.Input}],result$:[{type:o.Input}]},y);function y(e){this.fb=e}var F,g=(a(h,F=l),h.prototype.ngOnInit=function(){},h.decorators=[{type:o.Component,args:[{selector:"dynamic-forms-input-element",template:'<div class="input" [formGroup]="XFormGroup">\n  <mat-form-field>\n    <input matInput [placeholder]="XFormField.placeholder" [formControlName]="XFormField.id">\n  </mat-form-field>\n</div>\n',styles:[""]}]}],h.ctorParameters=function(){return[]},h);function h(){return F.call(this)||this}var b,v=(a(x,b=l),x.prototype.ngOnInit=function(){this.XFormField.otherOption&&console.warn("otherOption on radiogroup currently not supported!")},x.decorators=[{type:o.Component,args:[{selector:"dynamic-forms-radiogroup-element",template:'<div class="input" [formGroup]="XFormGroup">\n  <mat-radio-group [formControlName]="XFormField.id">\n    <mat-radio-button class="radio-button" *ngFor="let x of XFormField.options" [value]="x"\n      [labelPosition]="XFormField.align">\n      {{x}}\n    </mat-radio-button>\n  </mat-radio-group>\n</div>\n',styles:[".radio-button{display:block}"]}]}],x.ctorParameters=function(){return[]},x);function x(){return b.call(this)||this}var X,I=(a(k,X=l),k.prototype.ngOnInit=function(){},k.decorators=[{type:o.Component,args:[{selector:"dynamic-forms-select-element",template:'<div class="input" [formGroup]="XFormGroup">\n  <mat-form-field>\n    <mat-label>{{XFormField.title}}</mat-label>\n    <select matNativeControl [formControlName]="XFormField.id">\n      <option *ngFor="let option of XFormField.options" [value]="option">{{option}}</option>\n    </select>\n    \x3c!-- <mat-error *ngIf="field.controls.value.hasError(\'required\')">\n          This field is required\n        </mat-error>\n        <mat-hint>You can pick up your favorite car here</mat-hint> --\x3e\n  </mat-form-field>\n</div>\n',styles:[""]}]}],k.ctorParameters=function(){return[]},k);function k(){return X.call(this)||this}var M,C=(a(G,M=l),G.prototype.ngOnInit=function(){},G.decorators=[{type:o.Component,args:[{selector:"dynamic-forms-slide-element",template:'<div class="input" [formGroup]="XFormGroup">\n    <mat-slide-toggle [color]="XFormField.color" [formControlName]="XFormField.id">{{XFormField.text}}</mat-slide-toggle>\n  </div>\n',styles:[""]}]}],G.ctorParameters=function(){return[]},G);function G(){return M.call(this)||this}var O,P=(a(q,O=l),q.prototype.ngOnInit=function(){},q.decorators=[{type:o.Component,args:[{selector:"dynamic-forms-slider-element",template:'<div class="input" [formGroup]="XFormGroup">\n    <mat-slider\n      [min]="XFormField.min"\n      [max]="XFormField.max"\n      [step]="XFormField.step"\n      [formControlName]="XFormField.id">\n    </mat-slider>\n</div>\n',styles:[""]}]}],q.ctorParameters=function(){return[]},q);function q(){return O.call(this)||this}var w=(B.decorators=[{type:o.NgModule,args:[{declarations:[d,f,g,v,I,C,P],imports:[r.CommonModule,n.BrowserModule,s.FormsModule,s.ReactiveFormsModule,t.MatInputModule,t.MatButtonModule,t.MatSliderModule,t.MatSelectModule,t.MatCheckboxModule,t.MatRadioModule,t.MatSlideToggleModule],exports:[f]}]}],B);function B(){}e.DynamicFormsModule=w,e.ɵb=l,e.ɵa=d,e.ɵc=f,e.ɵd=g,e.ɵe=v,e.ɵf=I,e.ɵg=C,e.ɵh=P,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=dynamic-forms.umd.min.js.map